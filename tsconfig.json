{
    "files": [
        "app/scripts/**/*"
    ],
    "compilerOptions": {
        "alwaysStrict": true,
        "jsx": "React",
        "noImplicitAny": true,
        "noImplicitReturns": true,
        "noImplicitThis": true,
        "noImplicitUseStrict": true,
        "noUnusedLocals": true,
        "pretty": true,
        "strictNullChecks": true,
        "target": "es5"
    }
}
// {
//   "compilerOptions": {
//     "target": "es5",
//     "module": "es6",
//     // "moduleResolution":  "Node", /* Determine how modules get resolved. Either "Node" for Node.js/io.js style resolution, or "Classic". See Module Resolution documentation for more details. */

//     // "allowJs": false, /* Allow JavaScript files to be compiled. */
//     // "allowUnreachableCode": false, /* Do not report errors on unreachable code. */
//     // "allowUnusedLabels": false, /* Do not report errors on unused labels. */
//     // "alwaysStrict": true, /* Parse in strict mode and emit "use strict" for each source file */
//     // "charset":  "utf8", /* The character set of the input files. */
//     // "checkJs": false, /* Report errors in .js files. Use in conjunction with --allowJs. */
//     // "disableSizeLimit": false, /* Disable size limitation on JavaScript project. */
//     // "downlevelIteration": false, /* Provide full support for iterables in for..of, spread and destructuring when targeting ES5 or ES3. */
//     // "emitBOM": false, /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
//     // "emitDecoratorMetadata": false, /* Emit design-type metadata for decorated declarations in source. See issue #2577 for details. */
//     // "experimentalDecorators": false, /* Enables experimental support for ES decorators. */
//     // "forceConsistentCasingInFileNames": true, /* Disallow inconsistently-cased references to the same file. */
//     // "importHelpers": false, /* Import emit helpers (e.g. __extends, __rest, etc..) from tslib */
//     // "inlineSourceMap": false, /* Emit a single file with source maps instead of having a separate file. */
//     // "inlineSources": false, /* Emit the source alongside the sourcemaps within a single file; requires --inlineSourceMap or --sourceMap to be set. */
//     // "isolatedModules": false, /* Transpile each file as a separate module (similar to “ts.transpileModule”). */
//     "jsx": "React" /* Support JSX in .tsx files: "React" or "Preserve". See JSX. */
//     // "jsxFactory":  "React.createElement", /* Specify the JSX factory function to use when targeting react JSX emit, e.g. React.createElement or h. */
//     // "listEmittedFiles": true, /* Print names of generated files part of the compilation. */
//     // "listFiles": true, /* Print names of files part of the compilation. */
//     // "locale":  "en-us", /* The locale to use to show error messages, e.g. en-us. */
//     // "maxNodeModuleJsDepth":  0, /* The maximum dependency depth to search under node_modules and load JavaScript files. Only applicable with --allowJs. */
//     // "newLine":  "lf",  Use the specified end of line sequence to be used when emitting files: "crlf" (windows) or "lf" (unix).”
//     // "noEmit": false, /* Do not emit outputs. */
//     // "noEmitHelpers": false, /* Do not generate custom helper functions like __extends in compiled output. */
//     // "noEmitOnError": false, /* Do not emit outputs if any errors were reported. */
//     // "noFallthroughCasesInSwitch": true, /* Report errors for fallthrough cases in switch statement. */
//     // "noImplicitAny": true, /* Raise error on expressions and declarations with an implied any type. */
//     // "noImplicitReturns": true, /* Report error when not all code paths in function return a value. */
//     // "noImplicitThis": true, /* Raise error on this expressions with an implied any type. */
//     // "noImplicitUseStrict": false, /* Do not emit "use strict" directives in module output. */
//     // "noLib": false, /* Do not include the default library file (lib.d.ts). */
//     // "noResolve": false, /* Do not add triple-slash references or module import targets to the list of compiled files. */
//     // "noUnusedLocals": true, /* Report errors on unused locals. */
//     // "noUnusedParameters": false, /* Report errors on unused parameters. */
//     // "preserveConstEnums": false, /* Do not erase const enum declarations in generated code. See const enums documentation for more details. */
//     // "pretty": true, /* Stylize errors and messages using color and context. */
//     // "removeComments": true, /* Remove all comments except copy-right header comments beginning with /*! */
//     // "skipLibCheck": false, /* Skip type checking of all declaration files (*.d.ts). */
//     // "sourceMap": false, /* Generates corresponding .map file. */
//     // "strictNullChecks": true, /* In strict null checking mode, the null and undefined values are not in the domain of every type and are only assignable to themselves and any (the one exception being that undefined is also assignable to void). */
//     // "stripInternal": false, /* Do not emit declarations for code that has an @internal JSDoc annotation. */
//     // "suppressExcessPropertyErrors": false, /* Suppress excess property checks for object literals. */
//     // "suppressImplicitAnyIndexErrors": false, /* Suppress --noImplicitAny errors for indexing objects lacking index signatures. See issue #1232 for more details. */
//     // "traceResolution": false /* Report module resolution log messages. */
//   },
//   "include": [
//     "app/scripts/**/*",
//     // "node_modules/**/*",
//     "node_modules/@types/jquery/*.d.ts"
//   ],
//   "exclude": [
//     // "node_modules"
//   ]
// }
